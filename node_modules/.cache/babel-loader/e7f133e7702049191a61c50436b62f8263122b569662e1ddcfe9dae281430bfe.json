{"ast":null,"code":"var _jsxFileName = \"D:\\\\IntelliJ IDEA Community Edition 2023.3\\\\Projetos\\\\personal-space\\\\src\\\\components\\\\Pomodoro.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Pomodoro() {\n  _s();\n  const [workTimeInput, setWorkTimeInput] = useState(25); // Input field for work time (in minutes)\n  const [breakTimeInput, setBreakTimeInput] = useState(5); // Input field for break time (in minutes)\n  const [timeLeft, setTimeLeft] = useState(25 * 60); // Default time left (25 minutes)\n  const [isRunning, setIsRunning] = useState(false); // Is the timer running?\n  const [onBreak, setOnBreak] = useState(false); // Is it break time?\n\n  useEffect(() => {\n    let timer;\n    if (isRunning && timeLeft > 0) {\n      timer = setInterval(() => {\n        setTimeLeft(prevTime => prevTime - 1);\n      }, 1000);\n    } else if (timeLeft === 0) {\n      setOnBreak(prevOnBreak => !prevOnBreak); // Switch between work/break\n      setTimeLeft(onBreak ? workTimeInput * 60 : breakTimeInput * 60); // Set new time\n    }\n    return () => clearInterval(timer); // Clean up interval on component unmount\n  }, [isRunning, timeLeft, onBreak, workTimeInput, breakTimeInput]);\n  const startPauseTimer = () => {\n    setIsRunning(!isRunning);\n  };\n  const resetTimer = () => {\n    setIsRunning(false);\n    setOnBreak(false);\n    setTimeLeft(workTimeInput * 60); // Reset to user-specified work time\n  };\n  const handleWorkTimeChange = e => {\n    setWorkTimeInput(e.target.value);\n    if (!isRunning) {\n      setTimeLeft(e.target.value * 60); // Update timer when not running\n    }\n  };\n  const handleBreakTimeChange = e => {\n    setBreakTimeInput(e.target.value);\n  };\n  const formatTime = seconds => {\n    const minutes = Math.floor(seconds / 60);\n    const secs = seconds % 60;\n    return `${minutes.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"pomodoro\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: onBreak ? 'Break Time' : 'Work Time'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: formatTime(timeLeft)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"inputs\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Work Time (minutes):\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          value: workTimeInput,\n          onChange: handleWorkTimeChange,\n          disabled: isRunning // Disable when the timer is running\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Break Time (minutes):\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          value: breakTimeInput,\n          onChange: handleBreakTimeChange,\n          disabled: isRunning // Disable when the timer is running\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"buttons\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: startPauseTimer,\n        children: isRunning ? 'Pause' : 'Start'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: resetTimer,\n        children: \"Reset\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 5\n  }, this);\n}\n_s(Pomodoro, \"WXiF8zWXRajKpeHqZ24o02b85Sg=\");\n_c = Pomodoro;\nexport default Pomodoro;\nvar _c;\n$RefreshReg$(_c, \"Pomodoro\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","Pomodoro","_s","workTimeInput","setWorkTimeInput","breakTimeInput","setBreakTimeInput","timeLeft","setTimeLeft","isRunning","setIsRunning","onBreak","setOnBreak","timer","setInterval","prevTime","prevOnBreak","clearInterval","startPauseTimer","resetTimer","handleWorkTimeChange","e","target","value","handleBreakTimeChange","formatTime","seconds","minutes","Math","floor","secs","toString","padStart","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","onChange","disabled","onClick","_c","$RefreshReg$"],"sources":["D:/IntelliJ IDEA Community Edition 2023.3/Projetos/personal-space/src/components/Pomodoro.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\n\r\nfunction Pomodoro() {\r\n  const [workTimeInput, setWorkTimeInput] = useState(25); // Input field for work time (in minutes)\r\n  const [breakTimeInput, setBreakTimeInput] = useState(5);  // Input field for break time (in minutes)\r\n  const [timeLeft, setTimeLeft] = useState(25 * 60);  // Default time left (25 minutes)\r\n  const [isRunning, setIsRunning] = useState(false);  // Is the timer running?\r\n  const [onBreak, setOnBreak] = useState(false);      // Is it break time?\r\n\r\n  useEffect(() => {\r\n    let timer;\r\n\r\n    if (isRunning && timeLeft > 0) {\r\n      timer = setInterval(() => {\r\n        setTimeLeft(prevTime => prevTime - 1);\r\n      }, 1000);\r\n    } else if (timeLeft === 0) {\r\n      setOnBreak(prevOnBreak => !prevOnBreak); // Switch between work/break\r\n      setTimeLeft(onBreak ? workTimeInput * 60 : breakTimeInput * 60); // Set new time\r\n    }\r\n\r\n    return () => clearInterval(timer);  // Clean up interval on component unmount\r\n  }, [isRunning, timeLeft, onBreak, workTimeInput, breakTimeInput]);\r\n\r\n  const startPauseTimer = () => {\r\n    setIsRunning(!isRunning);\r\n  };\r\n\r\n  const resetTimer = () => {\r\n    setIsRunning(false);\r\n    setOnBreak(false);\r\n    setTimeLeft(workTimeInput * 60);  // Reset to user-specified work time\r\n  };\r\n\r\n  const handleWorkTimeChange = (e) => {\r\n    setWorkTimeInput(e.target.value);\r\n    if (!isRunning) {\r\n      setTimeLeft(e.target.value * 60); // Update timer when not running\r\n    }\r\n  };\r\n\r\n  const handleBreakTimeChange = (e) => {\r\n    setBreakTimeInput(e.target.value);\r\n  };\r\n\r\n  const formatTime = (seconds) => {\r\n    const minutes = Math.floor(seconds / 60);\r\n    const secs = seconds % 60;\r\n    return `${minutes.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;\r\n  };\r\n\r\n  return (\r\n    <div className=\"pomodoro\">\r\n      <h2>{onBreak ? 'Break Time' : 'Work Time'}</h2>\r\n      <h1>{formatTime(timeLeft)}</h1>\r\n\r\n      <div className=\"inputs\">\r\n        <label>\r\n          Work Time (minutes):\r\n          <input\r\n            type=\"number\"\r\n            value={workTimeInput}\r\n            onChange={handleWorkTimeChange}\r\n            disabled={isRunning} // Disable when the timer is running\r\n          />\r\n        </label>\r\n        <label>\r\n          Break Time (minutes):\r\n          <input\r\n            type=\"number\"\r\n            value={breakTimeInput}\r\n            onChange={handleBreakTimeChange}\r\n            disabled={isRunning} // Disable when the timer is running\r\n          />\r\n        </label>\r\n      </div>\r\n\r\n      <div className=\"buttons\">\r\n        <button onClick={startPauseTimer}>\r\n          {isRunning ? 'Pause' : 'Start'}\r\n        </button>\r\n        <button onClick={resetTimer}>\r\n          Reset\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Pomodoro;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}